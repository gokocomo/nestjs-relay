{"version":3,"file":"nestjs-relay.js","sources":["../../src/global-object-identification/global-id/resolved-global-id.class.ts","../../src/global-object-identification/global-id/global-id-field.decorator.ts","../../src/global-object-identification/global-id/global-id-field.resolver.ts","../../src/global-object-identification/global-id/global-id.scalar.ts","../../src/global-object-identification/node/node.interface.ts","../../src/global-object-identification/node/node-field.resolver.ts","../../src/common/scalar.utils.ts","../../src/common/metadata-storage.class.ts","../../src/global-object-identification/node/node-type.decorator.ts","../../src/mutation/input-arg.decorator.ts","../../src/mutation/utils/capitalise.util.ts","../../src/mutation/utils/get-client-mutation-id.util.ts","../../src/mutation/input-arg/input.mixin.ts","../../src/mutation/input-arg/input-arg.factory.ts","../../src/mutation/payload-type/payload.mixin.ts","../../src/mutation/payload-type/payload-type.factory.ts","../../src/mutation/utils/ensure-promise.ts","../../src/mutation/relay-mutation.decorator.ts","../../src/connection/args/backward-connection-args.type.ts","../../src/connection/args/connection-args.type.ts","../../src/connection/args/forward-connection-args.type.ts","../../src/connection/page-info.type.ts","../../src/connection/connection-type.factory.ts","../../src/connection/resolve-connection-field.decorator.ts"],"sourcesContent":["export interface RelayResolvedGlobalId {\n  type: string;\n  id: string;\n}\n\nexport class ResolvedGlobalId implements RelayResolvedGlobalId {\n  type!: string;\n  id!: string;\n\n  constructor(args: RelayResolvedGlobalId) {\n    this.type = args.type;\n    this.id = args.id;\n  }\n\n  toString() {\n    return this.id;\n  }\n\n  toNumber() {\n    return Number(this.id);\n  }\n}\n\nexport const typeResolvedGlobalId = () => ResolvedGlobalId;\n\nexport const typeResolvedGlobalIds = () => [ResolvedGlobalId];\n","import { ResolveField, FieldOptions } from '@nestjs/graphql';\nimport { typeResolvedGlobalId } from './resolved-global-id.class';\n\nexport type GlobalIdFieldOptions = Pick<FieldOptions, 'complexity'>;\n\nexport const GlobalIdField = (options?: GlobalIdFieldOptions) =>\n  ResolveField(typeResolvedGlobalId, {\n    name: 'id',\n    nullable: false,\n    ...options,\n  });\n","import { Type } from '@nestjs/common';\nimport { Resolver, Parent, Info } from '@nestjs/graphql';\nimport { GraphQLObjectType } from 'graphql';\nimport { GlobalId } from './global-id.type';\nimport { ResolvedGlobalId } from './resolved-global-id.class';\nimport { GlobalIdField, GlobalIdFieldOptions } from './global-id-field.decorator';\n\nexport interface ResolverParent {\n  id: GlobalId;\n}\n\nexport interface ResolverInfo {\n  parentType: Pick<GraphQLObjectType, 'name'>;\n}\n\nexport interface GlobalIdFieldResolver {\n  id(parent: ResolverParent | null, info: ResolverInfo): ResolvedGlobalId;\n}\n\nexport function GlobalIdFieldResolver<T>(\n  classRef: Type<T>,\n  idFieldOptions?: GlobalIdFieldOptions,\n): Type<GlobalIdFieldResolver> {\n  const globalIdFieldOptions = idFieldOptions || {};\n\n  @Resolver(classRef, { isAbstract: true })\n  abstract class GlobalIdFieldResolverHost {\n    @GlobalIdField(globalIdFieldOptions)\n    id(@Parent() parent: ResolverParent, @Info() info: ResolverInfo): ResolvedGlobalId {\n      if (!parent || !parent.id) {\n        throw new Error(`Cannot resolve id when 'parent' or 'parent.id' is null`);\n      }\n      switch (typeof parent.id) {\n        case 'object':\n          return parent.id;\n        case 'string':\n          return new ResolvedGlobalId({\n            type: info.parentType.name,\n            id: parent.id,\n          });\n        case 'number':\n          return new ResolvedGlobalId({\n            type: info.parentType.name,\n            id: parent.id.toString(),\n          });\n      }\n    }\n  }\n  return GlobalIdFieldResolverHost as Type<GlobalIdFieldResolver>;\n}\n","import { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { fromGlobalId, toGlobalId } from 'graphql-relay';\nimport { ValueNode, Kind, GraphQLError } from 'graphql';\nimport { typeResolvedGlobalId, ResolvedGlobalId } from './resolved-global-id.class';\n\n@Scalar('ID', typeResolvedGlobalId)\nexport class GlobalIdScalar implements CustomScalar<string, ResolvedGlobalId> {\n  parseValue(value: unknown): ResolvedGlobalId {\n    const { id, type } = fromGlobalId(value as string);\n    if (!id || !type) {\n      throw new GraphQLError(`Invalid ID: ${value}`);\n    }\n    return new ResolvedGlobalId({ type, id });\n  }\n\n  serialize(value: unknown): string {\n    if (typeof value !== 'object') {\n      return value as string;\n    }\n    const { id, type } = value as ResolvedGlobalId;\n    if (!id || !type) {\n      throw new GraphQLError(`Invalid ID value: ${value}`);\n    }\n    return toGlobalId(type, id);\n  }\n\n  parseLiteral(ast: ValueNode): ResolvedGlobalId {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(`Invalid ID type: ${ast.kind}`);\n    }\n    const { id, type } = fromGlobalId(ast.value);\n    if (!id || !type) {\n      throw new GraphQLError(`Invalid ID: ${ast.value}`);\n    }\n    return new ResolvedGlobalId({ type, id });\n  }\n}\n","import { Field, InterfaceType } from '@nestjs/graphql';\nimport { ResolvedGlobalId } from '../global-id';\n\n@InterfaceType('Node', {\n  description: 'An object with an ID',\n})\nexport class NodeInterface {\n  @Field({\n    nullable: false,\n    description: 'The ID of the object',\n  })\n  id!: ResolvedGlobalId;\n}\n\nexport const typeNodeInterface = () => NodeInterface;\n\nexport const typeNodeInterfaces = () => [NodeInterface];\n\nexport const returnsNodeInterface = () => NodeInterface;\n\nexport const returnsNodeInterfaces = () => [NodeInterface];\n","import { Query, Args, Resolver } from '@nestjs/graphql';\nimport { returnsNodeInterface, returnsNodeInterfaces, NodeInterface } from './node.interface';\nimport { ResolvedGlobalId, typeResolvedGlobalId, typeResolvedGlobalIds } from '../global-id';\n\nexport type ResolvedNode =\n  | Promise<NodeInterface>\n  | NodeInterface\n  | Promise<null>\n  | null\n  | Promise<undefined>\n  | undefined;\n\nexport interface NodeResolver {\n  resolveNode(id: ResolvedGlobalId): ResolvedNode;\n}\n\n@Resolver(NodeInterface)\nexport class NodeFieldResolver implements NodeResolver {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  resolveNode(id: ResolvedGlobalId): ResolvedNode {\n    throw new Error('Method not implemented.');\n  }\n\n  @Query(returnsNodeInterface, {\n    name: 'node',\n    description: 'Fetches an object given its ID',\n    nullable: true,\n  })\n  node(\n    @Args({\n      name: 'id',\n      nullable: false,\n      description: 'The ID of an object',\n      type: typeResolvedGlobalId,\n    })\n    id: ResolvedGlobalId,\n  ): ResolvedNode {\n    return this.resolveNode(id);\n  }\n\n  @Query(returnsNodeInterfaces, {\n    name: 'nodes',\n    description: 'Fetches objects given their IDs',\n    nullable: 'items',\n  })\n  nodes(\n    @Args({\n      name: 'ids',\n      nullable: false,\n      description: 'The IDs of objects',\n      type: typeResolvedGlobalIds,\n    })\n    ids: ResolvedGlobalId[],\n  ): Promise<ResolvedNode[]> {\n    return Promise.all(ids.map((id) => Promise.resolve(this.resolveNode(id))));\n  }\n}\n","import { Int } from '@nestjs/graphql';\n\nexport const returnsInt = () => Int;\n","import { ArgsOptions, ReturnTypeFunc } from '@nestjs/graphql';\n\nconst BASE_KEY = 'nestjs-relay';\nconst METHOD_KEY = 'method';\nconst METHOD_METADATA_KEY = `${BASE_KEY}:${METHOD_KEY}`;\nconst CLASS_KEY = 'class';\nconst CLASS_METADATA_KEY = `${BASE_KEY}:${CLASS_KEY}`;\n\nexport interface MethodIdentifier {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  target: Object;\n  key: string | symbol;\n}\n\nexport type ParameterMetadata = Omit<ArgsOptions, 'type'> & {\n  typeFunc: ReturnTypeFunc;\n  paramIndex: number;\n};\n\nexport interface ClassIdentifier {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  target: Function;\n}\n\nexport type ClassMetadata = {\n  name: string;\n};\n\nexport class MetadataStorage {\n  static addMethodMetadata(args: MethodIdentifier & ParameterMetadata): void {\n    const { target, key, ...data } = args;\n    const existingMetadata = MetadataStorage.getMethodMetadata({ target, key });\n    const metadata = [...existingMetadata, data];\n    Reflect.defineMetadata(METHOD_METADATA_KEY, metadata, target, key);\n  }\n\n  static getMethodMetadata({ target, key }: MethodIdentifier): ParameterMetadata[] {\n    return Reflect.getMetadata(METHOD_METADATA_KEY, target, key) || [];\n  }\n\n  static addClassMetadata(args: ClassIdentifier & ClassMetadata): void {\n    const { target, ...data } = args;\n    const existingMetadata = MetadataStorage.getClassMetadata({ target });\n    const metadata = { ...existingMetadata, ...data };\n    Reflect.defineMetadata(CLASS_METADATA_KEY, metadata, target);\n  }\n\n  static getClassMetadata({ target }: ClassIdentifier): ClassMetadata {\n    return Reflect.getMetadata(CLASS_METADATA_KEY, target);\n  }\n}\n","import { ObjectTypeOptions, ObjectType } from '@nestjs/graphql';\nimport { isString } from 'util';\nimport { NodeInterface } from './node.interface';\nimport { MetadataStorage, AnyConstructor } from '../../common';\n\nexport function NodeType(): ClassDecorator;\n\nexport function NodeType(options: ObjectTypeOptions): ClassDecorator;\n\nexport function NodeType(name: string, options?: ObjectTypeOptions): ClassDecorator;\n\nexport function NodeType<T extends AnyConstructor<T>>(\n  nameOrOptions?: string | ObjectTypeOptions,\n  objectTypeOptions?: ObjectTypeOptions,\n): ClassDecorator {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return (target: Function) => {\n    const [name, options = {}] = isString(nameOrOptions)\n      ? [nameOrOptions, objectTypeOptions]\n      : [target.name, nameOrOptions];\n\n    const interfaces = options.implements ? [].concat(options.implements as never) : [];\n\n    const nodeOptions: ObjectTypeOptions = {\n      ...options,\n      implements: interfaces.concat(NodeInterface as never),\n    };\n\n    MetadataStorage.addClassMetadata({ name, target });\n    ObjectType(name, nodeOptions)(target);\n  };\n}\n","import { ArgsOptions, ReturnTypeFunc } from '@nestjs/graphql';\nimport { MetadataStorage } from '../common';\n\nexport type InputArgOptions = Omit<ArgsOptions, 'name' | 'nullable' | 'type' | 'defaultValue'>;\n\nexport function InputArg<T>(\n  typeFunc: ReturnTypeFunc,\n  options?: InputArgOptions,\n): ParameterDecorator {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return (target: Object, key: string | symbol, paramIndex: number) => {\n    MetadataStorage.addMethodMetadata({\n      ...options,\n      typeFunc,\n      target,\n      key,\n      paramIndex,\n    });\n  };\n}\n","export const capitalise = (text: string): string => text.charAt(0).toUpperCase() + text.slice(1);\n","export const getClientMutationId = (args: any[]): string => {\n  const relayArgIndex = args.findIndex((arg) => arg['clientMutationId']);\n  return args[relayArgIndex]?.clientMutationId || null;\n};\n","import { Field, InputType } from '@nestjs/graphql';\nimport { capitalise } from '../utils';\nimport { AnyConstructor, Mixin } from '../../common';\n\nexport const getInputName = (mutationName: string): string => capitalise(mutationName) + 'Input';\n\nexport type InputMixin = Mixin<typeof InputMixin>;\n\nexport function InputMixin<TBase extends AnyConstructor>(base: TBase, mutationName: string) {\n  const name = getInputName(mutationName);\n\n  @InputType(name)\n  class Input extends base {\n    @Field({\n      name: 'clientMutationId',\n      nullable: true,\n    })\n    clientMutationId?: string;\n  }\n\n  return Input;\n}\n","import { ArgsOptions } from '@nestjs/graphql';\nimport { InputMixin } from './input.mixin';\nimport { ParameterMetadata, AnyConstructor } from '../../common';\n\nexport interface CreateInputTypeArgs {\n  params: ParameterMetadata[];\n  mutationName: string;\n}\n\nexport type InputArgOptions = Pick<ArgsOptions, 'type' | 'description'> & {\n  paramIndex: number;\n};\n\nexport class InputArgFactory {\n  static create(args: CreateInputTypeArgs): InputArgOptions {\n    if (args.params.length === 0) {\n      /**\n       * No parameters registered\n       * -> Do not create input type for this mutation\n       */\n      throw new Error(`Not detected any RelayArg declarations in ${args.mutationName}.`);\n    }\n\n    if (args.params.length > 1) {\n      /**\n       * Throw error that multiple inputs have been registered\n       */\n      throw new Error(`Detected multiple RelayArg declarations in ${args.mutationName}.`);\n    }\n\n    /**\n     * Single argument\n     * Is an input type\n     * -> Add the clientMutationId field\n     */\n    const param = args.params[0];\n\n    const type = param.typeFunc() as AnyConstructor;\n    const inputType = InputMixin(type, args.mutationName);\n\n    return {\n      type: () => inputType,\n      paramIndex: param.paramIndex,\n      description: param.description,\n    };\n  }\n}\n","import { ObjectType, Field } from '@nestjs/graphql';\nimport { capitalise } from '../utils';\nimport { AnyConstructor, Mixin } from '../../common';\n\nexport const getPayloadName = (mutationName: string): string =>\n  capitalise(mutationName) + 'Payload';\n\nexport type PayloadMixin = Mixin<typeof PayloadMixin>;\n\nexport function PayloadMixin<TBase extends AnyConstructor>(base: TBase, mutationName: string) {\n  const name = getPayloadName(mutationName);\n\n  @ObjectType(name)\n  class Payload extends base {\n    @Field({\n      name: 'clientMutationId',\n      nullable: true,\n    })\n    clientMutationId?: string;\n  }\n\n  return Payload;\n}\n","import { ReturnTypeFunc } from '@nestjs/graphql';\nimport { PayloadMixin } from './payload.mixin';\nimport { AnyConstructor } from '../../common';\n\nexport interface CreatePayloadTypeArgs {\n  typeFunc: ReturnTypeFunc;\n  mutationName: string;\n}\n\nexport class PayloadTypeFactory {\n  static create(args: CreatePayloadTypeArgs): AnyConstructor {\n    const type = args.typeFunc() as AnyConstructor;\n    const payloadType = PayloadMixin(type, args.mutationName);\n    return payloadType;\n  }\n}\n","/** Returns true if `maybePromise` is a Promise. */\nexport const isPromise = <T>(maybePromise: T | Promise<T>): maybePromise is Promise<T> =>\n  Boolean(typeof (maybePromise as any)?.then === 'function');\n\nexport const ensurePromise = <T>(maybePromise: T | Promise<T>) =>\n  isPromise(maybePromise) ? maybePromise : Promise.resolve(maybePromise);\n","import { ReturnTypeFunc, MutationOptions, Mutation, Args } from '@nestjs/graphql';\nimport { MetadataStorage } from '../common/metadata-storage.class';\nimport { InputArgFactory } from './input-arg';\nimport { PayloadTypeFactory } from './payload-type';\nimport { getClientMutationId } from './utils';\nimport { ensurePromise } from './utils/ensure-promise';\n\nexport type RelayMutationOptions = Omit<MutationOptions, 'nullable'>;\n\nexport function RelayMutation<T>(\n  typeFunc: ReturnTypeFunc,\n  options?: RelayMutationOptions,\n): MethodDecorator {\n  return (target: Record<string, any>, key: string | symbol, descriptor: PropertyDescriptor) => {\n    const mutationName = options?.name ? options.name : String(key);\n\n    /**\n     * Resolver Interceptor\n     */\n    const originalMethod = descriptor.value;\n    descriptor.value = async function (...args: any[]) {\n      const clientMutationId = getClientMutationId(args);\n      const methodResult = await ensurePromise(originalMethod.apply(this, args));\n      return { ...methodResult, clientMutationId };\n    };\n\n    /**\n     * Input Type\n     */\n    const params = MetadataStorage.getMethodMetadata({ target, key });\n    const { paramIndex, ...argOptions } = InputArgFactory.create({ params, mutationName });\n    const inputArgOptions = {\n      name: 'input',\n      nullable: false,\n      ...argOptions,\n    };\n    Args(inputArgOptions)(target, key, paramIndex);\n\n    /**\n     * Payload Type\n     */\n    const payloadType = PayloadTypeFactory.create({ typeFunc, mutationName });\n    const mutationOptions: MutationOptions = {\n      ...options,\n      name: mutationName,\n      nullable: true,\n    };\n    Mutation(() => payloadType, mutationOptions)(target, key, descriptor);\n  };\n}\n","import { ArgsType, Field } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\nimport { returnsInt } from '../../common';\n\n@ArgsType()\nexport class BackwardConnectionArgs {\n  @Field(returnsInt)\n  last!: number;\n\n  @Field({ nullable: true })\n  before?: Relay.ConnectionCursor;\n}\n","import { Field, ArgsType, Int } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\nimport { returnsInt } from '../../common';\n\n@ArgsType()\nexport class ConnectionArgs implements Relay.ConnectionArguments {\n  @Field({\n    nullable: true,\n    description: 'Paginate before opaque cursor',\n  })\n  before?: Relay.ConnectionCursor;\n\n  @Field({\n    nullable: true,\n    description: 'Paginate after opaque cursor',\n  })\n  after?: Relay.ConnectionCursor;\n\n  @Field(returnsInt, { nullable: true, description: 'Paginate first' })\n  first?: number;\n\n  @Field(returnsInt, { nullable: true, description: 'Paginate last' })\n  last?: number;\n}\n","import { ArgsType, Field } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\nimport { returnsInt } from '../../common';\n\n@ArgsType()\nexport class ForwardConnectionArgs {\n  @Field(returnsInt)\n  first!: number;\n\n  @Field({ nullable: true })\n  after?: Relay.ConnectionCursor;\n}\n","import { ObjectType, Field } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\n\n@ObjectType()\nexport class PageInfo implements Relay.PageInfo {\n  @Field(() => Boolean)\n  hasNextPage!: boolean;\n\n  @Field(() => Boolean)\n  hasPreviousPage!: boolean;\n\n  @Field(() => String)\n  startCursor!: Relay.ConnectionCursor;\n\n  @Field(() => String)\n  endCursor!: Relay.ConnectionCursor;\n}\n","import { ReturnTypeFunc, ObjectType, Field } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\nimport { PageInfo } from './page-info.type';\nimport { AnyConstructor } from '../common';\n\nexport interface CreateConnectionTypeArgs {\n  nodeTypeFunc: ReturnTypeFunc;\n  nodeTypeName: string;\n}\n\nexport class ConnectionTypeFactory {\n  static create<T>(args: CreateConnectionTypeArgs): AnyConstructor<Relay.Connection<T>> {\n    const nodeType = args.nodeTypeFunc() as AnyConstructor;\n\n    @ObjectType(`${args.nodeTypeName}Edge`)\n    class Edge implements Relay.Edge<T> {\n      @Field(() => nodeType, {\n        nullable: true,\n      })\n      node!: T;\n\n      @Field(() => String)\n      cursor!: Relay.ConnectionCursor;\n    }\n\n    @ObjectType(`${args.nodeTypeName}Connection`)\n    class Connection implements Relay.Connection<T> {\n      @Field(() => [Edge], {\n        nullable: 'itemsAndList',\n      })\n      edges!: Edge[];\n\n      @Field(() => PageInfo)\n      pageInfo!: Relay.PageInfo;\n    }\n\n    return Connection;\n  }\n}\n","import { ReturnTypeFunc, FieldOptions, ResolveField } from '@nestjs/graphql';\nimport { ConnectionTypeFactory } from './connection-type.factory';\nimport { MetadataStorage } from '../common';\n\nexport type ResolveConnectionFieldOptions = Omit<FieldOptions, 'nullable'>;\n\nexport function ResolveConnectionField(\n  nodeTypeFunc: ReturnTypeFunc,\n  options?: ResolveConnectionFieldOptions,\n): MethodDecorator {\n  return (target: Record<string, any>, key: string | symbol, descriptor: PropertyDescriptor) => {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const nodeType = nodeTypeFunc() as Function;\n    const typeMetadata = MetadataStorage.getClassMetadata({ target: nodeType });\n\n    const connection = ConnectionTypeFactory.create({\n      nodeTypeFunc,\n      nodeTypeName: typeMetadata.name,\n    });\n\n    const resolveFieldOptions = { ...options, nullable: true };\n    ResolveField(() => connection, resolveFieldOptions)(target, key, descriptor);\n  };\n}\n"],"names":["ResolveField","Parent","Info","Resolver","GlobalIdScalar","fromGlobalId","GraphQLError","toGlobalId","Kind","Scalar","NodeInterface","Field","InterfaceType","NodeFieldResolver","Query","Args","Int","isString","ObjectType","InputType","Mutation","BackwardConnectionArgs","ArgsType","ConnectionArgs","ForwardConnectionArgs","PageInfo"],"mappings":"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"}